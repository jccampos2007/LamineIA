openapi: 3.0.3
info:
  title: WS LamineIA - OpenAPI 3.0  
  version: 0.0.1
servers:  
  - url: http://localhost:4800     
  - url: https://wslamineia.academys.io:4800
tags:
  - name: auth
    description: Identification   
  - name: user
    description: Administration   
  - name: subscribers
    description: Administration   
  - name: paymenttype
    description: Administration 
paths:
  # module login
  /ws/auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Session Start.
      operationId: sendLogin
      requestBody:
        description: Init Session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendLogin'   
        required: true         
      responses:
        '200':
          description: Ok...!         
        '400':
          description: validation error
  # modulo login      

  # modulo user       
  /ws/user:
    get:
      tags:
        - user
      summary: Get One user.
      description:  One user.
      operationId: userGetOne   
      parameters:          
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true   
      responses:
        '200':
          description: Ok...!
        '210':
          description: getOne - empty...!
        '400':
          description: validation error  
        '403':
          description: Access Denied...!  
    post:
      tags:
        - user
      summary: Create user.
      description: New user.       
      operationId: adduser
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adduser'   
        required: true         
      responses:
        '201':
          description: Created...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!  
    put:
      tags:
        - user
      summary: Update user.
      description: Modify user.       
      operationId: updateuser
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateuser'   
        required: true         
      responses:
        '200':
          description: Ok / Update user...!
        '400':
          description: validation error / Sql Errors
        '403':
          description: Access Denied...!  
    delete:
      tags:
        - user
      summary: Delete user.
      description: delete 
      operationId: deleteuser.
      parameters:         
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true             
      responses:
        '200':
          description: Ok...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!    
  # modulo user 

  # modulo subscribers       
  /ws/subscribers:
    get:
      tags:
        - subscribers
      summary: Get One subscribers.
      description:  One subscribers.
      operationId: userGetOne   
      parameters:          
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true   
      responses:
        '200':
          description: Ok...!
        '210':
          description: getOne - empty...!
        '400':
          description: validation error  
        '403':
          description: Access Denied...!  
    post:
      tags:
        - subscribers
      summary: Create subscribers.
      description: New subscribers.       
      operationId: addsubscribers
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addsubscribers'   
        required: true         
      responses:
        '201':
          description: Created...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!  
    
    delete:
      tags:
        - subscribers
      summary: Delete subscribers.
      description: delete 
      operationId: deletesubscribers.
      parameters:         
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true             
      responses:
        '200':
          description: Ok...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!
  /ws/subscribers/list:
    get:
      tags:
        - subscribers
      summary: Get All subscribers.
      description:  All subscribers.
      operationId: userGetAll    
      responses:
        '200':
          description: Ok...!
        '210':
          description: getOne - empty...!
        '400':
          description: validation error  
        '403':
          description: Access Denied...!      
  # modulo subscribers

  # modulo paymenttype 

  /ws/paymenttype:
    get:
      tags:
        - paymenttype
      summary: Get One paymenttype.
      description:  One paymenttype.
      operationId: userGetOne   
      parameters:          
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true   
      responses:
        '200':
          description: Ok...!
        '210':
          description: getOne - empty...!
        '400':
          description: validation error  
        '403':
          description: Access Denied...!  
    post:
      tags:
        - paymenttype
      summary: Create paymenttype.
      description: New paymenttype.       
      operationId: addpaymenttype.
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addpaymenttype'   
        required: true         
      responses:
        '201':
          description: Created...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!  
    put:
      tags:
        - paymenttype
      summary: Update paymenttype.
      description: Modify paymenttype.       
      operationId: updatepaymenttype
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatepaymenttype'   
        required: true         
      responses:
        '200':
          description: Ok / Update user...!
        '400':
          description: validation error / Sql Errors
        '403':
          description: Access Denied...!  
    delete:
      tags:
        - paymenttype
      summary: Delete paymenttype.
      description: delete 
      operationId: deletepaymenttype.
      parameters:         
        - in: query
          name: id
          schema:
            type: integer 
            example : 0
          required: true             
      responses:
        '200':
          description: Ok...!
        '400':
          description: validation error
        '403':
          description: Access Denied...!
  /ws/paymenttype/list:
    get:
      tags:
        - paymenttype
      summary: Get All paymenttype.
      description:  All paymenttype.
      operationId: paymenttypeGetAll      
      responses:
        '200':
          description: Ok...!
        '210':
          description: getAll - empty...!
        '400':
          description: validation error  
        '403':
          description: Access Denied...!          
          
          # Modulo paymenttype 
#//////////////////////////////////////////////////////////////////////////////////////////          
components:
  schemas:
    sendLogin:
      type: object
      properties:
        email:
          type: string          
          example: user@gmail.com
        otp:
          type: string
          example: 123456
    adduser:
      type: object
      properties:
        email:
          type: string          
          example: "user@gmail.com"
    updateuser:
      type: object
      properties:
        id:
          type: integer
          example: 100
        email:
          type: string          
          example: "user@gmail.com"
  
    addsubscribers:
          type: object
          properties:
            idUser:
              type: integer     
              example: 1
            period:
              type: string 
              example: "2026-12-31"
            apiKey: 
              type: string
              example: "gr5g18g5s1gv53s1dv8sd4g"
    addpaymenttype:
          type: object
          properties:
            name:
              type: string    
              example: "paypal"
            paymentGateway:
              type: string 
              example: "paypal"
    updatepaymenttype:
          type: object
          properties:
            id:
              type: integer   
              example: 1
            name:
              type: string 
              example: "paypal" 
            paymentGateway:
              type: string  
              example: "paypal"
            status:
              type: integer 
              example: 1
            



    changeStatus:
      type: object
      properties:
        id:
          type: integer          
          example: 15    
        status:
          type: integer          
          example: 1        
      type: object

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer                     
         

security:
  - bearerAuth: []
